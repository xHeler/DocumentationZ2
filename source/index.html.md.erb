---
title: Przecięcia zera

language_tabs: # must be one of https://git.io/vQNgJ
  - c
  - python
  - shell
  - text

toc_footers:
  - <a href='https://github.com/xHeler'> - Github</a>
  - <a href='https://gitlab.com/bartosz.kwiatkowski'> - Gitlab</a>

search: true

code_clipboard: true
---

# Opis

Dokumentacja programu z lab 2 - Przecięcia zera.

# Kod

Program został napisany zgodnie ze standardem c99, kompilator GNU GCC.

> Kompilacja 

```shell
gcc -std=c99 -Wall -pedantic -o out/main.out main.c
```

> Uruchamianie 

```shell
cut -d ' ' -f 2- dane/przeciecia_zera1.txt | cut -d '.' -f1 | ./out/main.out
```



## Biblioteki, stałe

> Biblioteki

```c
#include <stdio.h>
#include <stdlib.h>
```
> Stałe

```c
#define MIN -10
#define MAX 10
#define FMIN 8
#define FMAX 12
#define SIZE_OF_PACKAGE 4
#define END 99
```


Została biblioteka zaimplementowana biblioteka standardowa.
Co do wartości stałych są to wartości zakresów poprawnych oraz
wartość wielkości pakietu.

Nazwa | Wartość| Opis
--------- | ------- | -----------
MIN | -10 | Wartość minimalna zakresu poprawnych danych
MAX | 10 | Wartość maksymalna zakresu poprawnych danych
FMIN | 8 | Wartość minimalna zakresu poprawnej częstotliowości
FMAX | 12 | Wartość maksymalna zakresu poprawnej częstotliowości
SIZE_OF_PACKAGE | 99 | Wielkość pakietu danych
END | 99 | Wartość kończąca działanie programu

<aside class="warning">Jako SIZE_OF_PACKAGE zaleca się użycia liczby większej równej 1.</aside>
<aside class="warning">Jako END zaleca się użycia liczby z poza zakresu MIN | MAX.</aside>


## Zmienne globalne, struktury

> Struktura enum

```c
typedef enum{
    False = 0,
    True  = 1,
    None  = 2, 
} sign;
```

> Zmienne globalne

```c
int number;
int numberAmount = 0;
int intersectionAmount = 0;
sign previousSign = None;
sign actuallySign = None;
```

Użyłem strukturę enum, która jest typem wyliczeniowym
i dla kolejnych argumentów przyjmuje rosnące wartości.
Wartości globalne to aktualnie odczytany numer, ilość 
wartości w pakiecie oraz liczba przecięć. Przechowywany
w strukturze enum jest znak.

### Struktura

Nazwa | Wartość | Opis
--------- | ------- | -----------
False | 0 | Wartość ta jest przyjmowana dla liczby ujemnej
True | 1 | Wartość ta jest przyjmowana dla liczby dodatniej
None | 2 | Wartość przejściowa

### Zmienne globalne

Nazwa | Wartość | Opis
--------- | ------- | -----------
number | null | Przechowywany aktualna wartość
numberAmount | 0 | Ilość liczb liczących w pakiecie
intersectionAmount | 0 | Ilość przecięc zera
previousSign | None | Znak poprzedniej liczby
actuallySign | None | Znak aktualnie badanej liczby

## Sprawdzanie odczytanej wartości

```c
if (scanf("%d", &number) == 1)
```

Warunkiem wykonania jest wczytanie przez scanf wartości typu int,
czyli puste linie są nie brane pod uwagę.

## Iteracja po pakiecie danych

```c
numberAmount++;
```

Liczba danych aktualnie liczonego pakietu zostaje iterowana.

## Sprawdzenie wartości kończącej program

```c
if (number == END){
  break;
}
```

Program zostaje zakończony po odczytaniu wartości END deklarowanej wcześniej.

## Sprawdzenie zakresu odczytanej wartości

```c
if (number >= MIN && number <= MAX)
```

Program sprawdza czy odczytana liczba mieści się w ramie wcześniej
sprecyzowanego zakresu.

## Znak aktualnej, poprzedniej liczby

### Przypadek zera lub zer
>Pętla w pętli

```c
if (numberAmount > 1)
  if (number == 0)  
    actuallySign = previousSign;
```

Tutaj przekazywana jest informacja o poprzednim znaku w przypadku
gdy pojawia się zero. Zero działa jak kurer przekazujący znak znajdujący
się przed sekcją zera lub zer.

### Przypisanie znaku

```c
if (number > 0)      actuallySign = True;
else if (number < 0) actuallySign = False;
```

W przypadku gdy liczba jest większa od zera znak zmieniamy na True,
w przeciwnym razie na False.

## Przecięcie zera

```c
if (((actuallySign ^ previousSign) == 1) &&
  previousSign != None && actuallySign != None)
    intersectionAmount++;
```
Przecięcie zera występuje jeżeli poprzednia wartość i aktualna są różne od None
oraz gdy alternatywa rozłączna znaków jest równa 1.

### Alternatywa rozłączna XOR

P | Q |  | P^Q 
--------- | ------- | ----------- |  -----------
0 | 0 |  | 0
0 | 1 |  | 1
1 | 0 |  | 1
1 | 1 |  | 0

## Przepis znaku

```c
if (numberAmount != 0) previousSign = actuallySign;
```

Gdy znak został juz sprawdzony dla danej liczby jest przekazywany dla kolejnej
w zmiennej previousSign.

## Wielkość pakietu

```c
if (numberAmount == SIZE_OF_PACKAGE)
```

Gdy ilość liczb jest równa wielkości pakietu następuje zamknięcie 
pojedyńczego pakietu danych.

## Częstotliowość 

```c
if ( FMIN > intersectionAmount || FMAX < intersectionAmount){
  printf("Nieprawidlowy puls: %d \n",intersectionAmount);
} else {
  printf("Prawidlowy puls: %d \n",intersectionAmount);
}
```
Jeżeli częstotliowość nie mieści się w danym przedziale pokazana jest informacja
o nieprawidłowej częstotliości w przeciwnym wypadku o poprawnej.

<aside class="warning">W orginalnym programie powinna być wyświetlana tylko wartość niepoprawna.
Mój program pokazuje obie w celu łatwiejszego sprawdzenia.</aside>

## Przywrócenie danych domyślnych

```c
number = 100;
numberAmount = 0;
intersectionAmount = 0;
previousSign = None;
actuallySign = None;
```
Przywracane są dane do stanów początkowych aby można było bezbłędnie
sprawdzić kolejny pakiet.

#Testy

```python
import matplotlib.pyplot as plt

# Open file
file = open("path")

data = []
i = 0
Lines = file.readlines()

# Getting value from file and packing to array
for line in Lines:
    if line != "\n":
        i += 1
        if int(line) != 99:
            data.append(int(line))

plt.plot(data, 'ro', label='Wartosci jako punkty')
plt.plot(data, 'g',  label='Wartosci jako funkcja')
plt.plot([0, 1000], [-10, -10], 'k--')
plt.plot([0, 1000], [10, 10], 'k--')
plt.plot([0, 1000], [0, 0], 'k--')

# Adding extra info
plt.xlabel("Numer pakietu w czasie")
plt.ylabel("Wartość")
plt.legend()
# Main plot size
plt.axis([0, 10, -20, 20])
plt.show()
```

Wykresy sporzadzone zostały w języku python. Wersja 3.7.4, biblioteka matplotlib.
Każdy test wykonany takim samym kodem.

##Test 1

> Dane

```text
7
-9
5
-3
99
```

<%= image_tag "images/test1.png" %>

##Test 2

> Dane

```text
8
0
0
-6
-8
0
-2
-5
99
```

<%= image_tag "images/test2.png" %>

##Test 3

> Dane

```text
5
3
2
1
-1
-4
-7
-8
99
```

<%= image_tag "images/test3.png" %>

##Test 4

> Dane

```text
4
3
-4
-7
0
-1
-3
-8
99
```

<%= image_tag "images/test4.png" %>

##Test 5

> Dane

```text
9
6

-3
-6
-8

-9
-5
-2
99
```

<%= image_tag "images/test5.png" %>

##Test 6

> Dane

```text
5
13
-3
3
-3
-7
-8
-12
-8
99
```

<%= image_tag "images/test6.png" %>

##Test 7

> Dane

```text
13
10
4
-3
-15
-7
-3
2
99
```

<%= image_tag "images/test7.png" %>

##Test 8

> Dane

```text
3
6
-12
99
```

<%= image_tag "images/test8.png" %>
